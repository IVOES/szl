# this file is part of szl.
#
# Copyright (c) 2016, 2017 Dima Krasner
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

$load zlib
$load test

$local bad_size [$format {buffer size must be between 0 and {}} $env.intmax]

$for {comp decomp} {zlib.deflate zlib.inflate zlib.gzip zlib.gunzip} {
	$test.run [$format {no {} args} $decomp] 0 [$format {${}} $decomp] [$format {bad usage, should be '{} str ?bufsiz?'} $decomp]
	$test.run [$format {too many {} args} $decomp] 0 [$format {${} hello 64 64} $decomp] [$format {bad usage, should be '{} str ?bufsiz?'} $decomp]

	$test.run [$format {no {} args} $comp] 0 [$format {${}} $comp] [$format {bad usage, should be '{} str ?level?'} $comp]
	$test.run [$format {too many {} args} $comp] 0 [$format {${} hello 9 9} $comp] [$format {bad usage, should be '{} str ?level?'} $comp]
	$test.run [$format {bad {} level 1} $comp] 0 [$format {${} hello 10} $comp] {level must be 0 to 9}
	$test.run [$format {bad {} level 2} $comp] 0 [$format {${} hello a} $comp] {bad int: a}

	$test.run [$format {{} and {}} $comp $decomp] 1 [$format {${} [${} hello]} $decomp $comp] hello
	$test.run [$format {{} and {} with whitespace} $comp $decomp] 1 [$format {${} [${} {hello world}]} $decomp $comp] {hello world}
	$test.run [$format {{} and {} with small buffer size} $comp $decomp] 1 [$format {${} [${} {hello world}] 4} $decomp $comp] {hello world}
	$test.run [$format {{} and {} with big buffer size} $comp $decomp] 1 [$format {${} [${} {hello world}] 512} $decomp $comp] {hello world}

	$test.run [$format {{} and {} with bad buffer size 1} $comp $decomp] 0 [$format {${} [${} {hello world}] 0} $decomp $comp] $bad_size
	$test.run [$format {{} and {} with bad buffer size 2} $comp $decomp] 0 [$format {${} [${} {hello world}] -2} $decomp $comp] $bad_size
	$test.run [$format {{} and {} with bad buffer size 3} $comp $decomp] 0 [$format {${} [${} {hello world}] a} $decomp $comp] {bad int: a}

	$test.run [$format {{} and {} with level -1} $comp $decomp] 1 [$format {${} [${} hello -1]} $decomp $comp] hello
	$test.run [$format {{} and {} with level 1} $comp $decomp] 1 [$format {${} [${} hello 1]} $decomp $comp] hello
	$test.run [$format {{} and {} with level 2} $comp $decomp] 1 [$format {${} [${} hello 2]} $decomp $comp] hello
	$test.run [$format {{} and {} with level 3} $comp $decomp] 1 [$format {${} [${} hello 3]} $decomp $comp] hello
	$test.run [$format {{} and {} with level 4} $comp $decomp] 1 [$format {${} [${} hello 4]} $decomp $comp] hello
	$test.run [$format {{} and {} with level 5} $comp $decomp] 1 [$format {${} [${} hello 5]} $decomp $comp] hello
	$test.run [$format {{} and {} with level 6} $comp $decomp] 1 [$format {${} [${} hello 6]} $decomp $comp] hello
	$test.run [$format {{} and {} with level 7} $comp $decomp] 1 [$format {${} [${} hello 7]} $decomp $comp] hello
	$test.run [$format {{} and {} with level 8} $comp $decomp] 1 [$format {${} [${} hello 8]} $decomp $comp] hello
	$test.run [$format {{} and {} with level 9} $comp $decomp] 1 [$format {${} [${} hello 9]} $decomp $comp] hello
}
