# this file is part of szl.
#
# Copyright (c) 2016, 2017 Dima Krasner
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

$load server

$global resp.delim [$expand \r\n]
$global resp.delim_len [$byte.len $resp.delim]
$global resp.simple_types [$list.new + - :]
$global resp.array_type *
$global resp.string_fmt [$expand {+{}\r\n}]
$global resp.error_fmt [$expand {-ERR {}\r\n}]
$global resp.integer_fmt [$expand {:{}\r\n}]
$global resp.simple_object_fmt [$expand {{}{}\r\n}]
$global resp.object_fmt [$expand {{}{}\r\n{}\r\n}]
$global resp.objects [$dict.new]
$global resp.ok [$expand +OK\r\n]
$global resp.pong [$expand +PONG\r\n]
$global resp.null {+ null}

$proc resp.var {
	$local type [$byte.range $1 0 0]
	$local delim_pos [$str.find $1 $resp.delim]

	$if [$list.in $resp.simple_types $type] {
		$list.new [$- [$byte.len $1] $delim_pos] [$list.new $type [$str.range $1 1 [$- $delim_pos 1]]]
	} else {
		$if [$== $type $resp.array_type] {
			$resp.array $1
		} else {
			$local len [$str.range $1 1 [$- $delim_pos 1]]
			$local val_pos [$+ $delim_pos $resp.delim_len]
			$list.new [$+ [$+ [$+ $len [$str.len $len]] [$* 2 $resp.delim_len]] 1] [$list.new $type [$str.range $1 $val_pos [$- [$+ $val_pos $len] 1]]]
		}
	}
}

$proc resp.array {
	$if [$!= * [$str.range $1 0 0]] {$throw {not an array}}

	$local delim_len [$str.len $resp.delim]

	$local delim_pos [$str.find $1 $resp.delim]
	$local array_len [$str.range $1 1 $delim_pos]

	$local items {}
	$local pos [$+ $delim_pos $delim_len]
	$for i [$range 0 $array_len] {
		$local len_and_item [$resp.var [$byte.range $1 $pos [$- [$byte.len $1] 1]]]
		$local pos [$+ $pos [$list.index $len_and_item 0]]
		$export pos
		$list.append $items [$list.index $len_and_item 1]
	}

	$list.new $pos $items
}

$proc resp.error {
	$format $resp.error_fmt $1
}

$class resp.server {
	$method get_response {
		$try {
			$local cmd [$list.index [$resp.array $2] 1]

			$switch [$list.index [$list.index $cmd 0] 1] SET {
				$dict.set $resp.objects [$list.index [$list.index $cmd 1] 1] [$list.index $cmd 2]
				$return $resp.ok
			} EXISTS {
				$local exist 0
				$for key [$map arg [$list.range $cmd 1 [$- [$list.len $cmd] 1]] {$list.index $arg 1}] {
					$try {
						$if [$is [$dict.get $resp.objects $key] $resp.null] {$continue}
						$export exist [$+ $exist 1]
					}
					$export exist
				}

				$format $resp.integer_fmt $exist
			} STRLEN {
				$format $resp.integer_fmt [$str.len [$list.index [$dict.get $resp.objects [$list.index [$list.index $cmd 1] 1]] 1]]
			} GET {
				$local key [$list.index [$list.index $cmd 1] 1]
				$local obj [$dict.get $resp.objects $key $resp.null]
				$if [$is $obj $resp.null] {$throw [$format {no such object: {}} $key]}

				$local type [$list.index $obj 0]
				$if [$list.in $resp.simple_types $type] {
					$format $resp.simple_object_fmt $type $val
				} else {
					$local val [$list.index $obj 1]
					$format $resp.object_fmt $type [$byte.len $val] $val
				}
			} DEL {
				$local removed 0
				$for key [$map arg [$list.range $cmd 1 [$- [$list.len $cmd] 1]] {$list.index $arg 1}] {
					$dict.set $resp.objects $key $resp.null
					$export removed [$+ $removed 1]
				}
				$format $resp.integer_fmt $removed
			} APPEND {
				$local val [$list.index [$dict.get $resp.objects [$list.index [$list.index $cmd 1] 1]] 1]
				$str.append $val [$list.index [$list.index $cmd 2] 1]
				$format $resp.integer_fmt [$str.len $val]
			} GETRANGE {
				$format $resp.string_fmt [$str.range [$list.index [$dict.get $resp.objects [$list.index [$list.index $cmd 1] 1]] 1] [$list.index [$list.index $cmd 2] 1] [$list.index [$list.index $cmd 3] 1]]
			} DBSIZE {
				$local size 0
				$for {name val} $resp.objects {
					$if [$is $val $resp.null] {$continue}
					$local size [$+ $size 1]
					$export size
				}
				$format $resp.integer_fmt $size
			} FLUSHDB {
				$for {name val} $resp.objects {
					$dict.set $resp.objects $name $resp.null
				}
				$return $resp.ok
			} PING {
				$if [$== [$list.len $cmd] 1] {$return $resp.pong}
				$format $resp.string_fmt [$list.index [$list.index $cmd 1] 1]
			} * {
				$throw {bad cmd}
			}
		} except {
			$resp.error $_
		}
	}
} $server.tcp
