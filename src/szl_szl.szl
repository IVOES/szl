# this file is part of szl.
#
# Copyright (c) 2016, 2017 Dima Krasner
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

$load linenoise

$proc szl.backtrace {
	$local frames [$1 eval {$backtrace}]
	$stdout writeln [$format {Unhandled error: {}} $2]

	$if [$== [$list.len $frames] 1] {
		$stdout writeln [$format { # {}} $frames]
	} else {
		$if [$> [$list.len $frames] 1] {
			$for {i f} [$zip [$range [$list.len $frames]] [$list.reverse $frames]] {
				$local l [$str.split $f $newline]
				$if [$> [$list.len $l] 1] {
					$stdout writeln [$format { #{}: {} ...} $i [$list.index $l 0]]
				} else {
					$stdout writeln [$format { #{}: {}} $i $f]
				}
			}
		}
	}
}

$proc szl.shell {
	$local in_tty [$isatty [$stdin handle]]

	$if $in_tty {
		$local history [$path.join [$env.get HOME] .szl_history]
		$if [$path.exists $history] {$linenoise.load $history}
		$export history
		$stdout writeln [$str.join { } szl $env.ver]
	}

	$if [$== [$list.len $@] 1] {
		$export argv {}
	} else {
		$export argv $1
	}

	$local obrace [$expand \x7b]
	$local cbrace [$expand \x7d]
	$local obracket [$expand \x5b]
	$local cbracket [$expand \x5d]

	$try {
		$while 1 {
			$if $in_tty {
				$local exp [$linenoise.read {>>> }]

				$while {[$|| [$!= [$str.count $exp $obrace] [$str.count $exp $cbrace]] [$!= [$str.count $exp $obracket] [$str.count $exp $cbracket]]]} {
					$str.append $exp [$linenoise.read {... }]
				}

				$export exp
			} else {
				$local exp [$stdin readln]
				$if [$== [$byte.len $exp] 0] {$break}

				$while {[$|| [$!= [$str.count $exp $obrace] [$str.count $exp $cbrace]] [$!= [$str.count $exp $obracket] [$str.count $exp $cbracket]]]} {
					$str.append $exp [$stdin readln]
				}

				$export exp
			}

			$if $exp {
				$try {
					$1 eval $exp
					$local out $_
					$if $in_tty {
						$stdout writeln [$repr $out]
					} else {
						$if [$byte.len $out] {$stdout writeln $out}
					}
				} except {
					$local out $_
					$if $in_tty {
						$szl.backtrace $1 [$repr $out]
					} else {
						$if [$byte.len $out] {$szl.backtrace $1 $out} else {$stdout write $newline}
					}
				}

				$try {$linenoise.add $exp}
			}
		}
	} finally {
		$if $in_tty {
			$try {$linenoise.save $history}
		}
	}
}

$proc szl.main {
	$try {
		$szl.shell [$szl.interp $@]
	} except {
		$stderr writeln $_
		$exit 1
	}
}
